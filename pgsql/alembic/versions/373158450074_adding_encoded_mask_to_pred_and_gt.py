"""Adding encoded mask to pred and gt

Created at: 2023-03-12 16:33:37.785297
"""

revision = '373158450074'
# To prune migrations prior to this one, set this down_revision to None
# and delete the files of the prior revisions.
down_revision = '31ae1334f053'

from alembic import op
import sqlalchemy as sa
from alembic_utils.pg_grant_table import PGGrantTable
from sqlalchemy import text as sql_text
from alembic import context

def upgrade():
    schema_upgrades()
    data_upgrades()

def downgrade():
    data_downgrades()
    schema_downgrades()

def schema_upgrades():
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('groundtruths', sa.Column('encoded_segmentation_class_mask', sa.String(), nullable=True))
    op.add_column('predictions', sa.Column('encoded_segmentation_class_mask', sa.String(), nullable=True))
    public_alembic_version_postgres_insert = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_insert)

    public_alembic_version_postgres_references = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_references)

    public_alembic_version_postgres_select = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_select)

    public_alembic_version_postgres_update = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_update)

    public_celery_taskmeta_postgres_insert = PGGrantTable(schema='public', table='celery_taskmeta', columns=['args', 'date_done', 'id', 'kwargs', 'name', 'queue', 'result', 'retries', 'status', 'task_id', 'traceback', 'worker'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_celery_taskmeta_postgres_insert)

    public_celery_taskmeta_postgres_references = PGGrantTable(schema='public', table='celery_taskmeta', columns=['args', 'date_done', 'id', 'kwargs', 'name', 'queue', 'result', 'retries', 'status', 'task_id', 'traceback', 'worker'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_celery_taskmeta_postgres_references)

    public_celery_taskmeta_postgres_select = PGGrantTable(schema='public', table='celery_taskmeta', columns=['args', 'date_done', 'id', 'kwargs', 'name', 'queue', 'result', 'retries', 'status', 'task_id', 'traceback', 'worker'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_celery_taskmeta_postgres_select)

    public_celery_taskmeta_postgres_update = PGGrantTable(schema='public', table='celery_taskmeta', columns=['args', 'date_done', 'id', 'kwargs', 'name', 'queue', 'result', 'retries', 'status', 'task_id', 'traceback', 'worker'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_celery_taskmeta_postgres_update)

    public_celery_tasksetmeta_postgres_insert = PGGrantTable(schema='public', table='celery_tasksetmeta', columns=['date_done', 'id', 'result', 'taskset_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_celery_tasksetmeta_postgres_insert)

    public_celery_tasksetmeta_postgres_references = PGGrantTable(schema='public', table='celery_tasksetmeta', columns=['date_done', 'id', 'result', 'taskset_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_celery_tasksetmeta_postgres_references)

    public_celery_tasksetmeta_postgres_select = PGGrantTable(schema='public', table='celery_tasksetmeta', columns=['date_done', 'id', 'result', 'taskset_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_celery_tasksetmeta_postgres_select)

    public_celery_tasksetmeta_postgres_update = PGGrantTable(schema='public', table='celery_tasksetmeta', columns=['date_done', 'id', 'result', 'taskset_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_celery_tasksetmeta_postgres_update)

    public_datapoints_postgres_insert = PGGrantTable(schema='public', table='datapoints', columns=['created_at', 'id', 'metadata', 'organization_id', 'request_id', 'text', 'type'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_datapoints_postgres_insert)

    public_datapoints_postgres_references = PGGrantTable(schema='public', table='datapoints', columns=['created_at', 'id', 'metadata', 'organization_id', 'request_id', 'text', 'type'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_datapoints_postgres_references)

    public_datapoints_postgres_select = PGGrantTable(schema='public', table='datapoints', columns=['created_at', 'id', 'metadata', 'organization_id', 'request_id', 'text', 'type'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_datapoints_postgres_select)

    public_datapoints_postgres_update = PGGrantTable(schema='public', table='datapoints', columns=['created_at', 'id', 'metadata', 'organization_id', 'request_id', 'text', 'type'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_datapoints_postgres_update)

    public_dataset_to_datapoints_postgres_insert = PGGrantTable(schema='public', table='dataset_to_datapoints', columns=['created_at', 'datapoint', 'dataset_version', 'organization_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_dataset_to_datapoints_postgres_insert)

    public_dataset_to_datapoints_postgres_references = PGGrantTable(schema='public', table='dataset_to_datapoints', columns=['created_at', 'datapoint', 'dataset_version', 'organization_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_dataset_to_datapoints_postgres_references)

    public_dataset_to_datapoints_postgres_select = PGGrantTable(schema='public', table='dataset_to_datapoints', columns=['created_at', 'datapoint', 'dataset_version', 'organization_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_dataset_to_datapoints_postgres_select)

    public_dataset_to_datapoints_postgres_update = PGGrantTable(schema='public', table='dataset_to_datapoints', columns=['created_at', 'datapoint', 'dataset_version', 'organization_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_dataset_to_datapoints_postgres_update)

    public_dataset_version_lines_postgres_insert = PGGrantTable(schema='public', table='dataset_version_lines', columns=['child_uuid', 'parent_uuid'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_dataset_version_lines_postgres_insert)

    public_dataset_version_lines_postgres_references = PGGrantTable(schema='public', table='dataset_version_lines', columns=['child_uuid', 'parent_uuid'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_dataset_version_lines_postgres_references)

    public_dataset_version_lines_postgres_select = PGGrantTable(schema='public', table='dataset_version_lines', columns=['child_uuid', 'parent_uuid'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_dataset_version_lines_postgres_select)

    public_dataset_version_lines_postgres_update = PGGrantTable(schema='public', table='dataset_version_lines', columns=['child_uuid', 'parent_uuid'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_dataset_version_lines_postgres_update)

    public_dataset_versions_postgres_insert = PGGrantTable(schema='public', table='dataset_versions', columns=['committed', 'created_at', 'created_by', 'dataset_uuid', 'dirty', 'message', 'organization_id', 'uuid'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_dataset_versions_postgres_insert)

    public_dataset_versions_postgres_references = PGGrantTable(schema='public', table='dataset_versions', columns=['committed', 'created_at', 'created_by', 'dataset_uuid', 'dirty', 'message', 'organization_id', 'uuid'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_dataset_versions_postgres_references)

    public_dataset_versions_postgres_select = PGGrantTable(schema='public', table='dataset_versions', columns=['committed', 'created_at', 'created_by', 'dataset_uuid', 'dirty', 'message', 'organization_id', 'uuid'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_dataset_versions_postgres_select)

    public_dataset_versions_postgres_update = PGGrantTable(schema='public', table='dataset_versions', columns=['committed', 'created_at', 'created_by', 'dataset_uuid', 'dirty', 'message', 'organization_id', 'uuid'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_dataset_versions_postgres_update)

    public_datasets_postgres_insert = PGGrantTable(schema='public', table='datasets', columns=['created_at', 'created_by', 'display_name', 'organization_id', 'uuid'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_datasets_postgres_insert)

    public_datasets_postgres_references = PGGrantTable(schema='public', table='datasets', columns=['created_at', 'created_by', 'display_name', 'organization_id', 'uuid'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_datasets_postgres_references)

    public_datasets_postgres_select = PGGrantTable(schema='public', table='datasets', columns=['created_at', 'created_by', 'display_name', 'organization_id', 'uuid'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_datasets_postgres_select)

    public_datasets_postgres_update = PGGrantTable(schema='public', table='datasets', columns=['created_at', 'created_by', 'display_name', 'organization_id', 'uuid'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_datasets_postgres_update)

    public_events_postgres_insert = PGGrantTable(schema='public', table='events', columns=['api_version', 'audio_metadata', 'benchmark_id', 'confidence', 'dataset_id', 'embeddings', 'entropy', 'f1_score', 'features', 'groundtruth', 'image_metadata', 'input_type', 'iou', 'is_bbox_row', 'logits', 'margin_of_confidence', 'metrics', 'model_id', 'model_type', 'model_version', 'organization_id', 'original_embeddings', 'prediction', 'processing_timestamp', 'ratio_of_confidence', 'request_id', 'tags', 'text', 'text_metadata', 'timestamp', 'uuid', 'video_metadata'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_events_postgres_insert)

    public_events_postgres_references = PGGrantTable(schema='public', table='events', columns=['api_version', 'audio_metadata', 'benchmark_id', 'confidence', 'dataset_id', 'embeddings', 'entropy', 'f1_score', 'features', 'groundtruth', 'image_metadata', 'input_type', 'iou', 'is_bbox_row', 'logits', 'margin_of_confidence', 'metrics', 'model_id', 'model_type', 'model_version', 'organization_id', 'original_embeddings', 'prediction', 'processing_timestamp', 'ratio_of_confidence', 'request_id', 'tags', 'text', 'text_metadata', 'timestamp', 'uuid', 'video_metadata'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_events_postgres_references)

    public_events_postgres_select = PGGrantTable(schema='public', table='events', columns=['api_version', 'audio_metadata', 'benchmark_id', 'confidence', 'dataset_id', 'embeddings', 'entropy', 'f1_score', 'features', 'groundtruth', 'image_metadata', 'input_type', 'iou', 'is_bbox_row', 'logits', 'margin_of_confidence', 'metrics', 'model_id', 'model_type', 'model_version', 'organization_id', 'original_embeddings', 'prediction', 'processing_timestamp', 'ratio_of_confidence', 'request_id', 'tags', 'text', 'text_metadata', 'timestamp', 'uuid', 'video_metadata'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_events_postgres_select)

    public_events_postgres_update = PGGrantTable(schema='public', table='events', columns=['api_version', 'audio_metadata', 'benchmark_id', 'confidence', 'dataset_id', 'embeddings', 'entropy', 'f1_score', 'features', 'groundtruth', 'image_metadata', 'input_type', 'iou', 'is_bbox_row', 'logits', 'margin_of_confidence', 'metrics', 'model_id', 'model_type', 'model_version', 'organization_id', 'original_embeddings', 'prediction', 'processing_timestamp', 'ratio_of_confidence', 'request_id', 'tags', 'text', 'text_metadata', 'timestamp', 'uuid', 'video_metadata'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_events_postgres_update)

    public_events_readonly_user_select = PGGrantTable(schema='public', table='events', columns=['api_version', 'audio_metadata', 'benchmark_id', 'confidence', 'dataset_id', 'embeddings', 'entropy', 'f1_score', 'features', 'groundtruth', 'image_metadata', 'input_type', 'iou', 'is_bbox_row', 'logits', 'margin_of_confidence', 'metrics', 'model_id', 'model_type', 'model_version', 'organization_id', 'original_embeddings', 'prediction', 'processing_timestamp', 'ratio_of_confidence', 'request_id', 'tags', 'text', 'text_metadata', 'timestamp', 'uuid', 'video_metadata'], role='readonly_user', grant='SELECT', with_grant_option=False)
    op.drop_entity(public_events_readonly_user_select)

    public_feature_vectors_postgres_insert = PGGrantTable(schema='public', table='feature_vectors', columns=['datapoint', 'encoded_value', 'id', 'metadata', 'model_name', 'organization_id', 'prediction', 'type'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_feature_vectors_postgres_insert)

    public_feature_vectors_postgres_references = PGGrantTable(schema='public', table='feature_vectors', columns=['datapoint', 'encoded_value', 'id', 'metadata', 'model_name', 'organization_id', 'prediction', 'type'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_feature_vectors_postgres_references)

    public_feature_vectors_postgres_select = PGGrantTable(schema='public', table='feature_vectors', columns=['datapoint', 'encoded_value', 'id', 'metadata', 'model_name', 'organization_id', 'prediction', 'type'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_feature_vectors_postgres_select)

    public_feature_vectors_postgres_update = PGGrantTable(schema='public', table='feature_vectors', columns=['datapoint', 'encoded_value', 'id', 'metadata', 'model_name', 'organization_id', 'prediction', 'type'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_feature_vectors_postgres_update)

    public_groundtruths_postgres_insert = PGGrantTable(schema='public', table='groundtruths', columns=['class_name', 'class_names', 'created_at', 'datapoint', 'height', 'id', 'left', 'organization_id', 'segmentation_class_mask', 'task_type', 'top', 'width'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_groundtruths_postgres_insert)

    public_groundtruths_postgres_references = PGGrantTable(schema='public', table='groundtruths', columns=['class_name', 'class_names', 'created_at', 'datapoint', 'height', 'id', 'left', 'organization_id', 'segmentation_class_mask', 'task_type', 'top', 'width'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_groundtruths_postgres_references)

    public_groundtruths_postgres_select = PGGrantTable(schema='public', table='groundtruths', columns=['class_name', 'class_names', 'created_at', 'datapoint', 'height', 'id', 'left', 'organization_id', 'segmentation_class_mask', 'task_type', 'top', 'width'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_groundtruths_postgres_select)

    public_groundtruths_postgres_update = PGGrantTable(schema='public', table='groundtruths', columns=['class_name', 'class_names', 'created_at', 'datapoint', 'height', 'id', 'left', 'organization_id', 'segmentation_class_mask', 'task_type', 'top', 'width'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_groundtruths_postgres_update)

    public_predictions_postgres_insert = PGGrantTable(schema='public', table='predictions', columns=['class_name', 'class_names', 'confidence', 'confidences', 'created_at', 'datapoint', 'height', 'id', 'left', 'metrics', 'model_name', 'organization_id', 'segmentation_class_mask', 'task_type', 'top', 'width'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_predictions_postgres_insert)

    public_predictions_postgres_references = PGGrantTable(schema='public', table='predictions', columns=['class_name', 'class_names', 'confidence', 'confidences', 'created_at', 'datapoint', 'height', 'id', 'left', 'metrics', 'model_name', 'organization_id', 'segmentation_class_mask', 'task_type', 'top', 'width'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_predictions_postgres_references)

    public_predictions_postgres_select = PGGrantTable(schema='public', table='predictions', columns=['class_name', 'class_names', 'confidence', 'confidences', 'created_at', 'datapoint', 'height', 'id', 'left', 'metrics', 'model_name', 'organization_id', 'segmentation_class_mask', 'task_type', 'top', 'width'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_predictions_postgres_select)

    public_predictions_postgres_update = PGGrantTable(schema='public', table='predictions', columns=['class_name', 'class_names', 'confidence', 'confidences', 'created_at', 'datapoint', 'height', 'id', 'left', 'metrics', 'model_name', 'organization_id', 'segmentation_class_mask', 'task_type', 'top', 'width'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_predictions_postgres_update)

    public_tags_postgres_insert = PGGrantTable(schema='public', table='tags', columns=['datapoint', 'id', 'name', 'organization_id', 'value'], role='postgres', grant='INSERT', with_grant_option=True)
    op.drop_entity(public_tags_postgres_insert)

    public_tags_postgres_references = PGGrantTable(schema='public', table='tags', columns=['datapoint', 'id', 'name', 'organization_id', 'value'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.drop_entity(public_tags_postgres_references)

    public_tags_postgres_select = PGGrantTable(schema='public', table='tags', columns=['datapoint', 'id', 'name', 'organization_id', 'value'], role='postgres', grant='SELECT', with_grant_option=True)
    op.drop_entity(public_tags_postgres_select)

    public_tags_postgres_update = PGGrantTable(schema='public', table='tags', columns=['datapoint', 'id', 'name', 'organization_id', 'value'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.drop_entity(public_tags_postgres_update)

    public_alembic_version_postgres_delete = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_delete)

    public_alembic_version_postgres_truncate = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_truncate)

    public_alembic_version_postgres_trigger = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_alembic_version_postgres_trigger)

    public_events_postgres_delete = PGGrantTable(schema='public', table='events', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_events_postgres_delete)

    public_events_postgres_truncate = PGGrantTable(schema='public', table='events', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_events_postgres_truncate)

    public_events_postgres_trigger = PGGrantTable(schema='public', table='events', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_events_postgres_trigger)

    public_celery_taskmeta_postgres_delete = PGGrantTable(schema='public', table='celery_taskmeta', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_celery_taskmeta_postgres_delete)

    public_celery_taskmeta_postgres_truncate = PGGrantTable(schema='public', table='celery_taskmeta', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_celery_taskmeta_postgres_truncate)

    public_celery_taskmeta_postgres_trigger = PGGrantTable(schema='public', table='celery_taskmeta', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_celery_taskmeta_postgres_trigger)

    public_celery_tasksetmeta_postgres_delete = PGGrantTable(schema='public', table='celery_tasksetmeta', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_celery_tasksetmeta_postgres_delete)

    public_celery_tasksetmeta_postgres_truncate = PGGrantTable(schema='public', table='celery_tasksetmeta', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_celery_tasksetmeta_postgres_truncate)

    public_celery_tasksetmeta_postgres_trigger = PGGrantTable(schema='public', table='celery_tasksetmeta', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_celery_tasksetmeta_postgres_trigger)

    public_datapoints_postgres_delete = PGGrantTable(schema='public', table='datapoints', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_datapoints_postgres_delete)

    public_datapoints_postgres_truncate = PGGrantTable(schema='public', table='datapoints', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_datapoints_postgres_truncate)

    public_datapoints_postgres_trigger = PGGrantTable(schema='public', table='datapoints', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_datapoints_postgres_trigger)

    public_dataset_to_datapoints_postgres_delete = PGGrantTable(schema='public', table='dataset_to_datapoints', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_dataset_to_datapoints_postgres_delete)

    public_dataset_to_datapoints_postgres_truncate = PGGrantTable(schema='public', table='dataset_to_datapoints', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_dataset_to_datapoints_postgres_truncate)

    public_dataset_to_datapoints_postgres_trigger = PGGrantTable(schema='public', table='dataset_to_datapoints', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_dataset_to_datapoints_postgres_trigger)

    public_dataset_version_lines_postgres_delete = PGGrantTable(schema='public', table='dataset_version_lines', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_dataset_version_lines_postgres_delete)

    public_dataset_version_lines_postgres_truncate = PGGrantTable(schema='public', table='dataset_version_lines', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_dataset_version_lines_postgres_truncate)

    public_dataset_version_lines_postgres_trigger = PGGrantTable(schema='public', table='dataset_version_lines', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_dataset_version_lines_postgres_trigger)

    public_dataset_versions_postgres_delete = PGGrantTable(schema='public', table='dataset_versions', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_dataset_versions_postgres_delete)

    public_dataset_versions_postgres_truncate = PGGrantTable(schema='public', table='dataset_versions', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_dataset_versions_postgres_truncate)

    public_dataset_versions_postgres_trigger = PGGrantTable(schema='public', table='dataset_versions', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_dataset_versions_postgres_trigger)

    public_datasets_postgres_delete = PGGrantTable(schema='public', table='datasets', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_datasets_postgres_delete)

    public_datasets_postgres_truncate = PGGrantTable(schema='public', table='datasets', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_datasets_postgres_truncate)

    public_datasets_postgres_trigger = PGGrantTable(schema='public', table='datasets', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_datasets_postgres_trigger)

    public_groundtruths_postgres_delete = PGGrantTable(schema='public', table='groundtruths', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_groundtruths_postgres_delete)

    public_groundtruths_postgres_truncate = PGGrantTable(schema='public', table='groundtruths', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_groundtruths_postgres_truncate)

    public_groundtruths_postgres_trigger = PGGrantTable(schema='public', table='groundtruths', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_groundtruths_postgres_trigger)

    public_tags_postgres_delete = PGGrantTable(schema='public', table='tags', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_tags_postgres_delete)

    public_tags_postgres_truncate = PGGrantTable(schema='public', table='tags', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_tags_postgres_truncate)

    public_tags_postgres_trigger = PGGrantTable(schema='public', table='tags', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_tags_postgres_trigger)

    public_feature_vectors_postgres_delete = PGGrantTable(schema='public', table='feature_vectors', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_feature_vectors_postgres_delete)

    public_feature_vectors_postgres_truncate = PGGrantTable(schema='public', table='feature_vectors', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_feature_vectors_postgres_truncate)

    public_feature_vectors_postgres_trigger = PGGrantTable(schema='public', table='feature_vectors', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_feature_vectors_postgres_trigger)

    public_predictions_postgres_delete = PGGrantTable(schema='public', table='predictions', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.drop_entity(public_predictions_postgres_delete)

    public_predictions_postgres_truncate = PGGrantTable(schema='public', table='predictions', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.drop_entity(public_predictions_postgres_truncate)

    public_predictions_postgres_trigger = PGGrantTable(schema='public', table='predictions', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.drop_entity(public_predictions_postgres_trigger)

    # ### end Alembic commands ###

def schema_downgrades():
    # ### commands auto generated by Alembic - please adjust! ###
    public_predictions_postgres_trigger = PGGrantTable(schema='public', table='predictions', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_predictions_postgres_trigger)

    public_predictions_postgres_truncate = PGGrantTable(schema='public', table='predictions', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_predictions_postgres_truncate)

    public_predictions_postgres_delete = PGGrantTable(schema='public', table='predictions', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_predictions_postgres_delete)

    public_feature_vectors_postgres_trigger = PGGrantTable(schema='public', table='feature_vectors', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_feature_vectors_postgres_trigger)

    public_feature_vectors_postgres_truncate = PGGrantTable(schema='public', table='feature_vectors', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_feature_vectors_postgres_truncate)

    public_feature_vectors_postgres_delete = PGGrantTable(schema='public', table='feature_vectors', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_feature_vectors_postgres_delete)

    public_tags_postgres_trigger = PGGrantTable(schema='public', table='tags', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_tags_postgres_trigger)

    public_tags_postgres_truncate = PGGrantTable(schema='public', table='tags', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_tags_postgres_truncate)

    public_tags_postgres_delete = PGGrantTable(schema='public', table='tags', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_tags_postgres_delete)

    public_groundtruths_postgres_trigger = PGGrantTable(schema='public', table='groundtruths', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_groundtruths_postgres_trigger)

    public_groundtruths_postgres_truncate = PGGrantTable(schema='public', table='groundtruths', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_groundtruths_postgres_truncate)

    public_groundtruths_postgres_delete = PGGrantTable(schema='public', table='groundtruths', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_groundtruths_postgres_delete)

    public_datasets_postgres_trigger = PGGrantTable(schema='public', table='datasets', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_datasets_postgres_trigger)

    public_datasets_postgres_truncate = PGGrantTable(schema='public', table='datasets', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_datasets_postgres_truncate)

    public_datasets_postgres_delete = PGGrantTable(schema='public', table='datasets', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_datasets_postgres_delete)

    public_dataset_versions_postgres_trigger = PGGrantTable(schema='public', table='dataset_versions', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_dataset_versions_postgres_trigger)

    public_dataset_versions_postgres_truncate = PGGrantTable(schema='public', table='dataset_versions', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_dataset_versions_postgres_truncate)

    public_dataset_versions_postgres_delete = PGGrantTable(schema='public', table='dataset_versions', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_dataset_versions_postgres_delete)

    public_dataset_version_lines_postgres_trigger = PGGrantTable(schema='public', table='dataset_version_lines', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_dataset_version_lines_postgres_trigger)

    public_dataset_version_lines_postgres_truncate = PGGrantTable(schema='public', table='dataset_version_lines', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_dataset_version_lines_postgres_truncate)

    public_dataset_version_lines_postgres_delete = PGGrantTable(schema='public', table='dataset_version_lines', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_dataset_version_lines_postgres_delete)

    public_dataset_to_datapoints_postgres_trigger = PGGrantTable(schema='public', table='dataset_to_datapoints', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_dataset_to_datapoints_postgres_trigger)

    public_dataset_to_datapoints_postgres_truncate = PGGrantTable(schema='public', table='dataset_to_datapoints', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_dataset_to_datapoints_postgres_truncate)

    public_dataset_to_datapoints_postgres_delete = PGGrantTable(schema='public', table='dataset_to_datapoints', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_dataset_to_datapoints_postgres_delete)

    public_datapoints_postgres_trigger = PGGrantTable(schema='public', table='datapoints', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_datapoints_postgres_trigger)

    public_datapoints_postgres_truncate = PGGrantTable(schema='public', table='datapoints', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_datapoints_postgres_truncate)

    public_datapoints_postgres_delete = PGGrantTable(schema='public', table='datapoints', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_datapoints_postgres_delete)

    public_celery_tasksetmeta_postgres_trigger = PGGrantTable(schema='public', table='celery_tasksetmeta', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_celery_tasksetmeta_postgres_trigger)

    public_celery_tasksetmeta_postgres_truncate = PGGrantTable(schema='public', table='celery_tasksetmeta', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_celery_tasksetmeta_postgres_truncate)

    public_celery_tasksetmeta_postgres_delete = PGGrantTable(schema='public', table='celery_tasksetmeta', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_celery_tasksetmeta_postgres_delete)

    public_celery_taskmeta_postgres_trigger = PGGrantTable(schema='public', table='celery_taskmeta', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_celery_taskmeta_postgres_trigger)

    public_celery_taskmeta_postgres_truncate = PGGrantTable(schema='public', table='celery_taskmeta', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_celery_taskmeta_postgres_truncate)

    public_celery_taskmeta_postgres_delete = PGGrantTable(schema='public', table='celery_taskmeta', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_celery_taskmeta_postgres_delete)

    public_events_postgres_trigger = PGGrantTable(schema='public', table='events', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_events_postgres_trigger)

    public_events_postgres_truncate = PGGrantTable(schema='public', table='events', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_events_postgres_truncate)

    public_events_postgres_delete = PGGrantTable(schema='public', table='events', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_events_postgres_delete)

    public_alembic_version_postgres_trigger = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='TRIGGER', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_trigger)

    public_alembic_version_postgres_truncate = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='TRUNCATE', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_truncate)

    public_alembic_version_postgres_delete = PGGrantTable(schema='public', table='alembic_version', columns=[], role='postgres', grant='DELETE', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_delete)

    public_tags_postgres_update = PGGrantTable(schema='public', table='tags', columns=['datapoint', 'id', 'name', 'organization_id', 'value'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_tags_postgres_update)

    public_tags_postgres_select = PGGrantTable(schema='public', table='tags', columns=['datapoint', 'id', 'name', 'organization_id', 'value'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_tags_postgres_select)

    public_tags_postgres_references = PGGrantTable(schema='public', table='tags', columns=['datapoint', 'id', 'name', 'organization_id', 'value'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_tags_postgres_references)

    public_tags_postgres_insert = PGGrantTable(schema='public', table='tags', columns=['datapoint', 'id', 'name', 'organization_id', 'value'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_tags_postgres_insert)

    public_predictions_postgres_update = PGGrantTable(schema='public', table='predictions', columns=['class_name', 'class_names', 'confidence', 'confidences', 'created_at', 'datapoint', 'height', 'id', 'left', 'metrics', 'model_name', 'organization_id', 'segmentation_class_mask', 'task_type', 'top', 'width'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_predictions_postgres_update)

    public_predictions_postgres_select = PGGrantTable(schema='public', table='predictions', columns=['class_name', 'class_names', 'confidence', 'confidences', 'created_at', 'datapoint', 'height', 'id', 'left', 'metrics', 'model_name', 'organization_id', 'segmentation_class_mask', 'task_type', 'top', 'width'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_predictions_postgres_select)

    public_predictions_postgres_references = PGGrantTable(schema='public', table='predictions', columns=['class_name', 'class_names', 'confidence', 'confidences', 'created_at', 'datapoint', 'height', 'id', 'left', 'metrics', 'model_name', 'organization_id', 'segmentation_class_mask', 'task_type', 'top', 'width'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_predictions_postgres_references)

    public_predictions_postgres_insert = PGGrantTable(schema='public', table='predictions', columns=['class_name', 'class_names', 'confidence', 'confidences', 'created_at', 'datapoint', 'height', 'id', 'left', 'metrics', 'model_name', 'organization_id', 'segmentation_class_mask', 'task_type', 'top', 'width'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_predictions_postgres_insert)

    public_groundtruths_postgres_update = PGGrantTable(schema='public', table='groundtruths', columns=['class_name', 'class_names', 'created_at', 'datapoint', 'height', 'id', 'left', 'organization_id', 'segmentation_class_mask', 'task_type', 'top', 'width'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_groundtruths_postgres_update)

    public_groundtruths_postgres_select = PGGrantTable(schema='public', table='groundtruths', columns=['class_name', 'class_names', 'created_at', 'datapoint', 'height', 'id', 'left', 'organization_id', 'segmentation_class_mask', 'task_type', 'top', 'width'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_groundtruths_postgres_select)

    public_groundtruths_postgres_references = PGGrantTable(schema='public', table='groundtruths', columns=['class_name', 'class_names', 'created_at', 'datapoint', 'height', 'id', 'left', 'organization_id', 'segmentation_class_mask', 'task_type', 'top', 'width'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_groundtruths_postgres_references)

    public_groundtruths_postgres_insert = PGGrantTable(schema='public', table='groundtruths', columns=['class_name', 'class_names', 'created_at', 'datapoint', 'height', 'id', 'left', 'organization_id', 'segmentation_class_mask', 'task_type', 'top', 'width'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_groundtruths_postgres_insert)

    public_feature_vectors_postgres_update = PGGrantTable(schema='public', table='feature_vectors', columns=['datapoint', 'encoded_value', 'id', 'metadata', 'model_name', 'organization_id', 'prediction', 'type'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_feature_vectors_postgres_update)

    public_feature_vectors_postgres_select = PGGrantTable(schema='public', table='feature_vectors', columns=['datapoint', 'encoded_value', 'id', 'metadata', 'model_name', 'organization_id', 'prediction', 'type'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_feature_vectors_postgres_select)

    public_feature_vectors_postgres_references = PGGrantTable(schema='public', table='feature_vectors', columns=['datapoint', 'encoded_value', 'id', 'metadata', 'model_name', 'organization_id', 'prediction', 'type'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_feature_vectors_postgres_references)

    public_feature_vectors_postgres_insert = PGGrantTable(schema='public', table='feature_vectors', columns=['datapoint', 'encoded_value', 'id', 'metadata', 'model_name', 'organization_id', 'prediction', 'type'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_feature_vectors_postgres_insert)

    public_events_readonly_user_select = PGGrantTable(schema='public', table='events', columns=['api_version', 'audio_metadata', 'benchmark_id', 'confidence', 'dataset_id', 'embeddings', 'entropy', 'f1_score', 'features', 'groundtruth', 'image_metadata', 'input_type', 'iou', 'is_bbox_row', 'logits', 'margin_of_confidence', 'metrics', 'model_id', 'model_type', 'model_version', 'organization_id', 'original_embeddings', 'prediction', 'processing_timestamp', 'ratio_of_confidence', 'request_id', 'tags', 'text', 'text_metadata', 'timestamp', 'uuid', 'video_metadata'], role='readonly_user', grant='SELECT', with_grant_option=False)
    op.create_entity(public_events_readonly_user_select)

    public_events_postgres_update = PGGrantTable(schema='public', table='events', columns=['api_version', 'audio_metadata', 'benchmark_id', 'confidence', 'dataset_id', 'embeddings', 'entropy', 'f1_score', 'features', 'groundtruth', 'image_metadata', 'input_type', 'iou', 'is_bbox_row', 'logits', 'margin_of_confidence', 'metrics', 'model_id', 'model_type', 'model_version', 'organization_id', 'original_embeddings', 'prediction', 'processing_timestamp', 'ratio_of_confidence', 'request_id', 'tags', 'text', 'text_metadata', 'timestamp', 'uuid', 'video_metadata'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_events_postgres_update)

    public_events_postgres_select = PGGrantTable(schema='public', table='events', columns=['api_version', 'audio_metadata', 'benchmark_id', 'confidence', 'dataset_id', 'embeddings', 'entropy', 'f1_score', 'features', 'groundtruth', 'image_metadata', 'input_type', 'iou', 'is_bbox_row', 'logits', 'margin_of_confidence', 'metrics', 'model_id', 'model_type', 'model_version', 'organization_id', 'original_embeddings', 'prediction', 'processing_timestamp', 'ratio_of_confidence', 'request_id', 'tags', 'text', 'text_metadata', 'timestamp', 'uuid', 'video_metadata'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_events_postgres_select)

    public_events_postgres_references = PGGrantTable(schema='public', table='events', columns=['api_version', 'audio_metadata', 'benchmark_id', 'confidence', 'dataset_id', 'embeddings', 'entropy', 'f1_score', 'features', 'groundtruth', 'image_metadata', 'input_type', 'iou', 'is_bbox_row', 'logits', 'margin_of_confidence', 'metrics', 'model_id', 'model_type', 'model_version', 'organization_id', 'original_embeddings', 'prediction', 'processing_timestamp', 'ratio_of_confidence', 'request_id', 'tags', 'text', 'text_metadata', 'timestamp', 'uuid', 'video_metadata'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_events_postgres_references)

    public_events_postgres_insert = PGGrantTable(schema='public', table='events', columns=['api_version', 'audio_metadata', 'benchmark_id', 'confidence', 'dataset_id', 'embeddings', 'entropy', 'f1_score', 'features', 'groundtruth', 'image_metadata', 'input_type', 'iou', 'is_bbox_row', 'logits', 'margin_of_confidence', 'metrics', 'model_id', 'model_type', 'model_version', 'organization_id', 'original_embeddings', 'prediction', 'processing_timestamp', 'ratio_of_confidence', 'request_id', 'tags', 'text', 'text_metadata', 'timestamp', 'uuid', 'video_metadata'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_events_postgres_insert)

    public_datasets_postgres_update = PGGrantTable(schema='public', table='datasets', columns=['created_at', 'created_by', 'display_name', 'organization_id', 'uuid'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_datasets_postgres_update)

    public_datasets_postgres_select = PGGrantTable(schema='public', table='datasets', columns=['created_at', 'created_by', 'display_name', 'organization_id', 'uuid'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_datasets_postgres_select)

    public_datasets_postgres_references = PGGrantTable(schema='public', table='datasets', columns=['created_at', 'created_by', 'display_name', 'organization_id', 'uuid'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_datasets_postgres_references)

    public_datasets_postgres_insert = PGGrantTable(schema='public', table='datasets', columns=['created_at', 'created_by', 'display_name', 'organization_id', 'uuid'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_datasets_postgres_insert)

    public_dataset_versions_postgres_update = PGGrantTable(schema='public', table='dataset_versions', columns=['committed', 'created_at', 'created_by', 'dataset_uuid', 'dirty', 'message', 'organization_id', 'uuid'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_dataset_versions_postgres_update)

    public_dataset_versions_postgres_select = PGGrantTable(schema='public', table='dataset_versions', columns=['committed', 'created_at', 'created_by', 'dataset_uuid', 'dirty', 'message', 'organization_id', 'uuid'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_dataset_versions_postgres_select)

    public_dataset_versions_postgres_references = PGGrantTable(schema='public', table='dataset_versions', columns=['committed', 'created_at', 'created_by', 'dataset_uuid', 'dirty', 'message', 'organization_id', 'uuid'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_dataset_versions_postgres_references)

    public_dataset_versions_postgres_insert = PGGrantTable(schema='public', table='dataset_versions', columns=['committed', 'created_at', 'created_by', 'dataset_uuid', 'dirty', 'message', 'organization_id', 'uuid'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_dataset_versions_postgres_insert)

    public_dataset_version_lines_postgres_update = PGGrantTable(schema='public', table='dataset_version_lines', columns=['child_uuid', 'parent_uuid'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_dataset_version_lines_postgres_update)

    public_dataset_version_lines_postgres_select = PGGrantTable(schema='public', table='dataset_version_lines', columns=['child_uuid', 'parent_uuid'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_dataset_version_lines_postgres_select)

    public_dataset_version_lines_postgres_references = PGGrantTable(schema='public', table='dataset_version_lines', columns=['child_uuid', 'parent_uuid'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_dataset_version_lines_postgres_references)

    public_dataset_version_lines_postgres_insert = PGGrantTable(schema='public', table='dataset_version_lines', columns=['child_uuid', 'parent_uuid'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_dataset_version_lines_postgres_insert)

    public_dataset_to_datapoints_postgres_update = PGGrantTable(schema='public', table='dataset_to_datapoints', columns=['created_at', 'datapoint', 'dataset_version', 'organization_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_dataset_to_datapoints_postgres_update)

    public_dataset_to_datapoints_postgres_select = PGGrantTable(schema='public', table='dataset_to_datapoints', columns=['created_at', 'datapoint', 'dataset_version', 'organization_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_dataset_to_datapoints_postgres_select)

    public_dataset_to_datapoints_postgres_references = PGGrantTable(schema='public', table='dataset_to_datapoints', columns=['created_at', 'datapoint', 'dataset_version', 'organization_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_dataset_to_datapoints_postgres_references)

    public_dataset_to_datapoints_postgres_insert = PGGrantTable(schema='public', table='dataset_to_datapoints', columns=['created_at', 'datapoint', 'dataset_version', 'organization_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_dataset_to_datapoints_postgres_insert)

    public_datapoints_postgres_update = PGGrantTable(schema='public', table='datapoints', columns=['created_at', 'id', 'metadata', 'organization_id', 'request_id', 'text', 'type'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_datapoints_postgres_update)

    public_datapoints_postgres_select = PGGrantTable(schema='public', table='datapoints', columns=['created_at', 'id', 'metadata', 'organization_id', 'request_id', 'text', 'type'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_datapoints_postgres_select)

    public_datapoints_postgres_references = PGGrantTable(schema='public', table='datapoints', columns=['created_at', 'id', 'metadata', 'organization_id', 'request_id', 'text', 'type'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_datapoints_postgres_references)

    public_datapoints_postgres_insert = PGGrantTable(schema='public', table='datapoints', columns=['created_at', 'id', 'metadata', 'organization_id', 'request_id', 'text', 'type'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_datapoints_postgres_insert)

    public_celery_tasksetmeta_postgres_update = PGGrantTable(schema='public', table='celery_tasksetmeta', columns=['date_done', 'id', 'result', 'taskset_id'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_celery_tasksetmeta_postgres_update)

    public_celery_tasksetmeta_postgres_select = PGGrantTable(schema='public', table='celery_tasksetmeta', columns=['date_done', 'id', 'result', 'taskset_id'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_celery_tasksetmeta_postgres_select)

    public_celery_tasksetmeta_postgres_references = PGGrantTable(schema='public', table='celery_tasksetmeta', columns=['date_done', 'id', 'result', 'taskset_id'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_celery_tasksetmeta_postgres_references)

    public_celery_tasksetmeta_postgres_insert = PGGrantTable(schema='public', table='celery_tasksetmeta', columns=['date_done', 'id', 'result', 'taskset_id'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_celery_tasksetmeta_postgres_insert)

    public_celery_taskmeta_postgres_update = PGGrantTable(schema='public', table='celery_taskmeta', columns=['args', 'date_done', 'id', 'kwargs', 'name', 'queue', 'result', 'retries', 'status', 'task_id', 'traceback', 'worker'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_celery_taskmeta_postgres_update)

    public_celery_taskmeta_postgres_select = PGGrantTable(schema='public', table='celery_taskmeta', columns=['args', 'date_done', 'id', 'kwargs', 'name', 'queue', 'result', 'retries', 'status', 'task_id', 'traceback', 'worker'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_celery_taskmeta_postgres_select)

    public_celery_taskmeta_postgres_references = PGGrantTable(schema='public', table='celery_taskmeta', columns=['args', 'date_done', 'id', 'kwargs', 'name', 'queue', 'result', 'retries', 'status', 'task_id', 'traceback', 'worker'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_celery_taskmeta_postgres_references)

    public_celery_taskmeta_postgres_insert = PGGrantTable(schema='public', table='celery_taskmeta', columns=['args', 'date_done', 'id', 'kwargs', 'name', 'queue', 'result', 'retries', 'status', 'task_id', 'traceback', 'worker'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_celery_taskmeta_postgres_insert)

    public_alembic_version_postgres_update = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='UPDATE', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_update)

    public_alembic_version_postgres_select = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='SELECT', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_select)

    public_alembic_version_postgres_references = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='REFERENCES', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_references)

    public_alembic_version_postgres_insert = PGGrantTable(schema='public', table='alembic_version', columns=['version_num'], role='postgres', grant='INSERT', with_grant_option=True)
    op.create_entity(public_alembic_version_postgres_insert)

    op.drop_column('predictions', 'encoded_segmentation_class_mask')
    op.drop_column('groundtruths', 'encoded_segmentation_class_mask')
    # ### end Alembic commands ###

def data_upgrades():
    """Add any optional data upgrade migrations here!"""
    pass

def data_downgrades():
    """Add any optional data downgrade migrations here!"""
    pass